home tab:

  void _showFilterModal() {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      backgroundColor: Colors.transparent,

      builder: (context) {
        // return Column(
        //   children: [
        //     Text('Dịch vụ đã chọn vụ đã chọn: ${selectedServices.join(', ')}'),
        //     Text('Dịch : ${selectedServices.join(', ')}')
        //   ],
        // );
        return StatefulBuilder(
            builder: (BuildContext context, StateSetter setState){
              return  Stack(
                children: [
                  GestureDetector(
                    onTap: () {
                      Navigator.of(context).pop(); // Đóng modal khi nhấn bên ngoài
                    },
                    child: Container(
                      color: Colors.transparent, // Khu vực bên ngoài modal
                    ),
                  ),
                  Align(
                    alignment: Alignment.topLeft,
                    child: SlideTransition(
                      position: _animation!,
                      child: Container(
                        alignment: Alignment.centerLeft,
                        height: MediaQuery.of(context).size.height, // Full chiều cao
                        width: MediaQuery.of(context).size.width / 3 * 2, // Chiều rộng 2/3
                        color: Colors.white,
                        child: Column(
                          mainAxisAlignment: MainAxisAlignment.start,
                          children: [
                            AppBar(
                              title: const Text('Lọc'),
                              automaticallyImplyLeading: false,
                            ),
                            const Text('Chọn dịch vụ:', style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),

                            Wrap(
                              spacing: 8.0, // Khoảng cách giữa các nút
                              runSpacing: 4.0, // Khoảng cách giữa các hàng
                              children: services.map((service) {
                                bool isSelected = selectedServices.contains(service);
                                return ChoiceChip(
                                  label: Text(service),
                                  selected: isSelected,
                                  onSelected: (bool selected) {
                                   setState((){
                                     _toggleService(service);
                                   });
                                  },
                                );
                              }).toList(),
                            ),
                            Text('Dịch vụ đã chọn: ${selectedServices.join(', ')}'),

                            DropdownButtonFormField<String>(
                              value: selectedRoomType,
                              hint: const Text('Chọn loại phòng'),
                              onChanged: (String? newValue) {
                                setState(() {
                                  selectedRoomType = newValue!;
                                });
                              },
                              items: roomTypes.map<DropdownMenuItem<String>>((String value) {
                                return DropdownMenuItem<String>(
                                  value: value,
                                  child: Text(value),
                                );
                              }).toList(),
                            ),
                            const SizedBox(height: 10),

                            // Nhập địa chỉ
                            TextField(
                              decoration: const InputDecoration(
                                labelText: 'Địa chỉ',
                                border: OutlineInputBorder(),
                              ),
                              onChanged: (value) {
                                setState(() {
                                  address = value;
                                });
                              },
                            ),
                            const SizedBox(height: 10),

                            // Nhập giá tiền
                            Row(
                              children: [
                                Flexible(
                                  child: TextField(
                                    keyboardType: TextInputType.number,
                                    decoration: const InputDecoration(
                                      labelText: 'Giá thấp nhất',
                                      border: OutlineInputBorder(),
                                    ),
                                    onChanged: (value) {
                                      setState(() {
                                        minPrice = value;
                                      });
                                    },
                                  ),
                                ),
                                const SizedBox(width: 10),
                                Flexible(
                                  child: TextField(
                                    keyboardType: TextInputType.number,
                                    decoration: const InputDecoration(
                                      labelText: 'Giá cao nhất',
                                      border: OutlineInputBorder(),
                                    ),
                                    onChanged: (value) {
                                      setState(() {
                                        maxPrice = value;
                                      });
                                    },
                                  ),
                                ),
                              ],
                            ),
                            const SizedBox(height: 10),

                            // Dropdown giới tính
                            DropdownButtonFormField<String>(
                              value: selectedGender,
                              hint: const Text('Giới tính'),
                              onChanged: (String? newValue) {
                                setState(() {
                                  selectedGender = newValue!;
                                });
                              },
                              items: <String>['Nam', 'Nữ', 'Cả hai'].map<DropdownMenuItem<String>>((String value) {
                                return DropdownMenuItem<String>(
                                  value: value,
                                  child: Text(value),
                                );
                              }).toList(),
                            ),
                          ],
                        ),
                      ),
                    ),
                  ),
                ],
              );
            }
        );
      },
    ).whenComplete(() => _controller!.reset());
    _controller!.forward();
  }



@override
  Widget build(BuildContext context) {
    final roomProvider = Provider.of<RoomProvider>(context);
    return Scaffold(
      appBar: AppBar(
        actions: [
          IconButton(
            icon: const Icon(Icons.filter_list),
            onPressed: _showFilterModal,
          ),
        ],
        title: const Text('Home'),
      ),
      body: SingleChildScrollView(